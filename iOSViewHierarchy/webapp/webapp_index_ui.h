//
//  webapp_index_ui.h
//  iOSHierarchyViewer
//
//
// THIS FILE IS GENERATED AUTOMATICALLY BY XCODE's script
//
//

#ifndef iOSHierarchyViewer_webapp_index_ui 
#define iOSHierarchyViewer_webapp_index_ui 

#define WEBAPP_INDEX_UI @""

#endif
